/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

//
// Reserve space in the vectors to avoid unnecessary memory re-allocations.
//

#include "vec.h"
template<class T>
void
BFieldMesh<T>::reserve(int nz, int nr, int nphi, int nfield)
{
  m_mesh[0].reserve(nz);
  m_mesh[1].reserve(nr);
  m_mesh[2].reserve(nphi);
  m_field.reserve(nfield);
}

//
// Test if a point (z,r,phi) is inside this mesh region.
//
template<class T>
bool
BFieldMesh<T>::inside(double z, double r, double phi) const
{
  // assume phi is in [-pi,pi].
  // phimax() is in [0,2pi], but phimin() may be < 0 if the range crosses phi =
  // 0. we have to test twice to get all possible cases.
  if (phi < phimin()) {
    phi += 2.0 * M_PI;
  }
  return (phi >= phimin() && phi <= phimax() && z >= zmin() && z <= zmax() &&
          r >= rmin() && r <= rmax());
}
//
// Construct the look-up table to accelerate bin-finding.
//
template<class T>
void
BFieldMesh<T>::buildLUT()
{
  for (int j = 0; j < 3; ++j) { // z, r, phi
    // align the m_mesh edges to m_min/m_max
    m_mesh[j].front() = m_min[j];
    m_mesh[j].back() = m_max[j];
    // determine the unit size, q, to be used in the LUTs
    const double width = m_mesh[j].back() - m_mesh[j].front();
    double q(width);
    for (unsigned i = 0; i < m_mesh[j].size() - 1; ++i) {
      q = std::min(q, m_mesh[j][i + 1] - m_mesh[j][i]);
    }
    // find the number of units in the LUT
    int n = int(width / q) + 1;
    q = width / (n + 0.5);
    m_invUnit[j] = 1.0 / q; // new unit size
    ++n;
    int m = 0;                    // mesh number
    for (int i = 0; i < n; ++i) { // LUT index
      if (i * q + m_mesh[j].front() > m_mesh[j][m + 1]) {
        m++;
      }
      m_LUT[j].push_back(m);
    }
  }
  m_roff = m_mesh[2].size();          // index offset for incrementing r by 1
  m_zoff = m_roff * m_mesh[1].size(); // index offset for incrementing z by 1
}

template<class T>
int
BFieldMesh<T>::memSize() const
{
  int size = 0;
  size += sizeof(double) * 10;
  size += sizeof(int) * 2;
  for (int i = 0; i < 3; ++i) {
    size += sizeof(double) * m_mesh[i].capacity();
    size += sizeof(int) * m_LUT[i].capacity();
  }
  size += sizeof(BFieldVector<T>) * m_field.capacity();
  return size;
}

//
// Find and return the cache of the bin containing (z,r,phi)
//
template<class T>
void
BFieldMesh<T>::getCache(double z,
                        double r,
                        double phi,
                        BFieldCache& cache,
                        double scaleFactor) const
{
  // make sure phi is inside this zone
  if (phi < phimin()) {
    phi += 2.0 * M_PI;
  }
  // find the mesh, and relative location in the mesh
  // z
  const std::vector<double>& mz(m_mesh[0]);
  int iz = int((z - zmin()) * m_invUnit[0]); // index to LUT
  iz = m_LUT[0][iz];                         // tentative mesh index from LUT
  if (z > mz[iz + 1]) {
    ++iz;
  }
  // r
  const std::vector<double>& mr(m_mesh[1]);
  int ir = int((r - rmin()) * m_invUnit[1]); // index to LUT
  ir = m_LUT[1][ir];                         // tentative mesh index from LUT
  if (r > mr[ir + 1]) {
    ++ir;
  }
  // phi
  const std::vector<double>& mphi(m_mesh[2]);
  int iphi = int((phi - phimin()) * m_invUnit[2]); // index to LUT
  iphi = m_LUT[2][iphi]; // tentative mesh index from LUT
  if (phi > mphi[iphi + 1]) {
    ++iphi;
  }
  // store the bin edges
  cache.setRange(
    mz[iz], mz[iz + 1], mr[ir], mr[ir + 1], mphi[iphi], mphi[iphi + 1]);

  // store the B field at the 8 corners
  const int im0 = iz * m_zoff + ir * m_roff + iphi; // index of the first corner

  const double sf = scaleFactor;

  double field1[3][8] = { { sf * m_field[im0][0],
                            sf * m_field[im0 + m_roff][0],
                            sf * m_field[im0 + m_zoff][0],
                            sf * m_field[im0 + m_zoff + m_roff][0],
                            sf * m_field[im0 + 1][0],
                            sf * m_field[im0 + m_roff + 1][0],
                            sf * m_field[im0 + m_zoff + 1][0],
                            sf * m_field[im0 + m_zoff + m_roff + 1][0] },
                          { sf * m_field[im0][1],
                            sf * m_field[im0 + m_roff][1],
                            sf * m_field[im0 + m_zoff][1],
                            sf * m_field[im0 + m_zoff + m_roff][1],
                            sf * m_field[im0 + 1][1],
                            sf * m_field[im0 + m_roff + 1][1],
                            sf * m_field[im0 + m_zoff + 1][1],
                            sf * m_field[im0 + m_zoff + m_roff + 1][1] },
                          { sf * m_field[im0][2],
                            sf * m_field[im0 + m_roff][2],
                            sf * m_field[im0 + m_zoff][2],
                            sf * m_field[im0 + m_zoff + m_roff][2],
                            sf * m_field[im0 + 1][2],
                            sf * m_field[im0 + m_roff + 1][2],
                            sf * m_field[im0 + m_zoff + 1][2],
                            sf * m_field[im0 + m_zoff + m_roff + 1][2] } };
  cache.setField(field1);

  // store the B scale
  cache.setBscale(m_scale);
}
//
// Find and return the cache of the bin containing (z,r,phi)
//
template<class T>
void
BFieldMesh<T>::getCacheVec(double z,
                           double r,
                           double phi,
                           BFieldCache& cache,
                           double scaleFactor) const
{
  // make sure phi is inside this zone
  if (phi < phimin()) {
    phi += 2.0 * M_PI;
  }
  // find the mesh, and relative location in the mesh
  // z
  const std::vector<double>& mz(m_mesh[0]);
  int iz = int((z - zmin()) * m_invUnit[0]); // index to LUT
  iz = m_LUT[0][iz];                         // tentative mesh index from LUT
  if (z > mz[iz + 1]) {
    ++iz;
  }
  // r
  const std::vector<double>& mr(m_mesh[1]);
  int ir = int((r - rmin()) * m_invUnit[1]); // index to LUT
  ir = m_LUT[1][ir];                         // tentative mesh index from LUT
  if (r > mr[ir + 1]) {
    ++ir;
  }
  // phi
  const std::vector<double>& mphi(m_mesh[2]);
  int iphi = int((phi - phimin()) * m_invUnit[2]); // index to LUT
  iphi = m_LUT[2][iphi]; // tentative mesh index from LUT
  if (phi > mphi[iphi + 1]) {
    ++iphi;
  }
  // store the bin edges
  cache.setRange(
    mz[iz], mz[iz + 1], mr[ir], mr[ir + 1], mphi[iphi], mphi[iphi + 1]);

  // store the B field at the 8 corners
  const int im0 = iz * m_zoff + ir * m_roff + iphi; // index of the first corner

  const double sf = scaleFactor;

  CxxUtils::vec<double, 8> field1 = {
    static_cast<double>(m_field[im0][0]),
    static_cast<double>(m_field[im0 + m_roff][0]),
    static_cast<double>(m_field[im0 + m_zoff][0]),
    static_cast<double>(m_field[im0 + m_zoff + m_roff][0]),
    static_cast<double>(m_field[im0 + 1][0]),
    static_cast<double>(m_field[im0 + m_roff + 1][0]),
    static_cast<double>(m_field[im0 + m_zoff + 1][0]),
    static_cast<double>(m_field[im0 + m_zoff + m_roff + 1][0])
  };

  CxxUtils::vec<double, 8> field2 = {
    static_cast<double>(m_field[im0][1]),
    static_cast<double>(m_field[im0 + m_roff][1]),
    static_cast<double>(m_field[im0 + m_zoff][1]),
    static_cast<double>(m_field[im0 + m_zoff + m_roff][1]),
    static_cast<double>(m_field[im0 + 1][1]),
    static_cast<double>(m_field[im0 + m_roff + 1][1]),
    static_cast<double>(m_field[im0 + m_zoff + 1][1]),
    static_cast<double>(m_field[im0 + m_zoff + m_roff + 1][1])
  };

  CxxUtils::vec<double, 8> field3 = {
    static_cast<double>(m_field[im0][2]),
    static_cast<double>(m_field[im0 + m_roff][2]),
    static_cast<double>(m_field[im0 + m_zoff][2]),
    static_cast<double>(m_field[im0 + m_zoff + m_roff][2]),
    static_cast<double>(m_field[im0 + 1][2]),
    static_cast<double>(m_field[im0 + m_roff + 1][2]),
    static_cast<double>(m_field[im0 + m_zoff + 1][2]),
    static_cast<double>(m_field[im0 + m_zoff + m_roff + 1][2])
  };
  cache.setFieldVec(sf * field1, sf * field2, sf * field3);

  // store the B scale
  cache.setBscale(m_scale);
}

